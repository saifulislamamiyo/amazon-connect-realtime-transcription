AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Amazon Connect IVR Recording Solution:
  - Create the basic foundation for streaming customer audio from Amazon Connect by deploying:
  - S3 Bucket for audio files, and the sample contact flow
  - S3 Bucket for storing combined audio files
  - Dynamo DB tables: transcriptSegments, transcriptSegmentsToCustomer, and contactDetails
  - A Lambda that will store the initial contact details in dynamo and trigger Java Lambda to process KVS Stream by passing the stream details to the function
  - A Java Lambda to consume KVS and stream it to Amazon Transcribe, store the segments in DDB and upload the raw audio to S3
  - A Node.js Lambda triggered by S3 once WAV file is uploaded to store the concatenated transcript segments in the contact details table along with the S3 location of the audio file
  - A Lambda Layer containg FFMPEG
  - A Lambda function to combine the two audio files FROM_CUSTOMER and TO_CUSTOMER into a single file and place in S3 bucket

Mappings:
  FunctionMap:
    Configuration:
      SolutionID: "SOXXXX"
  Send:
    AnonymousUsage:
      Data: "No"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      -
        Label:
          default: Existing configuration
        Parameters:
          - existingS3BucketName
          - existingS3Path
      -
        Label:
          default: Amazon S3 Configuration
        Parameters:
          - s3BucketName
          - audioFilePrefix
          - rawAudioUploadPrefix
          - audioFileName
    ParameterLabels:
      existingS3BucketName:
        default: Existing S3 Bucket
      existingS3Path:
        default: Existing S3 path
      s3BucketName:
        default: Recorded audio files from the customer and ivr
      audioFilePrefix:
        default: Audio File Prefix
      rawAudioUploadPrefix:
        default: Test Mono Audio Prefix
      audioFileName:
        default: The case-sensitive name of the Audio file without extentsion.
Parameters:
  existingS3BucketName:
    Type: String
    Default: existingS3Bucket
    Description: The name of the S3 bucket that contains the zipped lambda files
  existingS3Path:
    Type: String
    Default: deployment/
    Description: The path to the zipped lambda files in the existingS3BucketName
  s3BucketName:
    Type: String
    Default: "new-audio-bucket-name"
    Description: >
      Enter the (globally unique) name you would like to use for the Amazon S3 bucket where we will store the audio files, and the sample contact flow.
      This template will fail to deploy if the bucket name you chose is currently in use.
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
  audioFilePrefix:
    Type: String
    Default:  recordings/
    Description:  The Amazon S3 prefix where the audio files will be saved (must end in "/")
  rawAudioUploadPrefix:
    Type: String
    Default:  audio-file-input/
    Description:  >
      The Amazon S3 prefix where raw/wav (audio/L16; mono; 8 kHz) audio recordings may be uploaded in the event you would like
      process an audio file vs making a phone call and streaming from KVS. Mainly for testing, or for realtime transcription of audio files. This will only work with single channel files (mono). 
  audioFileName:
    Type: String
    Default:  CUSTOMER_AUDIO_FILE
    Description:  >
      The audio recording file name. Don't put any extension as .wav will be added by lambda
Outputs:
  createS3BucketOP:
    Description: Bucket contains individual channel call recordings
    Value: !Sub 'https://console.aws.amazon.com/s3/home?region=${AWS::Region}&bucket=${s3BucketName}'

Resources:  
  
  createS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref s3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      CorsConfiguration:
        CorsRules:
          -   AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
                - HEAD
              MaxAge: '3000'

  KvsTranscribeRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: transcribe:* do not support resource-level permissions and kinesisvideo streams are dynamically created and therefore cannot be specificed directly
          - id: W11
            reason: transcribe:* do not support resource-level permissions and kinesisvideo streams are dynamically created and therefore cannot be specificed directly
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: kvs-streaming-transcribe-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !Sub ${createS3Bucket.Arn}/*
              -
                Effect: "Allow"
                Action:
                  - "transcribe:DeleteTranscriptionJob"
                  - "transcribe:GetTranscriptionJob"
                  - "transcribe:GetVocabulary"
                  - "transcribe:ListTranscriptionJobs"
                  - "transcribe:ListVocabularies"
                  - "transcribe:StartStreamTranscription"
                  - "transcribe:StartTranscriptionJob"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "kinesisvideo:Describe*"
                  - "kinesisvideo:Get*"
                  - "kinesisvideo:List*"
                Resource: "*"

  KvsTriggerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: kvs-streaming-trigger-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              -
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:InvokeAsync"
                Resource:
                  - !GetAtt kvsTranscriber.Arn

  kvsTranscriber:
    Type: "AWS::Lambda::Function"
    Properties:
      Description:  >
        Process audio from Kinesis Video Stream and use Amazon Transcribe to get text
        for the caller audio. Will be invoked by the kvsConsumerTrigger Lambda, writes results to the
        transcript DynamoDB tables, and uploads the audio file to S3.

      Handler: "com.amazonaws.kvstranscribestreaming.KVSTranscribeStreamingLambda::handleRequest"
      Role: !GetAtt KvsTranscribeRole.Arn
      Runtime: java8
      MemorySize: 512
      # maximum timeout is 15 minutes today
      Timeout: 900
      Environment:
        Variables:
          # JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStore=lib/InternalAndExternalTrustStore.jks -Djavax.net.ssl.trustStorePassword=amazon"
          APP_REGION: !Ref "AWS::Region"
          TRANSCRIBE_REGION: !Ref "AWS::Region"
          RECORDINGS_BUCKET_NAME: !Ref s3BucketName
          RECORDING_FILE_NAME: !Ref audioFileName
          RECORDINGS_KEY_PREFIX: !Ref audioFilePrefix
          INPUT_KEY_PREFIX: !Ref rawAudioUploadPrefix
          RECORDINGS_PUBLIC_READ_ACL: "FALSE"
          CONSOLE_LOG_TRANSCRIPT_FLAG: "TRUE"
          LOGGING_LEVEL: "FINE"
          SAVE_PARTIAL_TRANSCRIPTS: "TRUE"
          START_SELECTOR_TYPE: "FRAGMENT_NUMBER"
          SEND_ANONYMOUS_DATA: !FindInMap [ "Send", "AnonymousUsage", "Data"]
      Code:
        S3Bucket: !Ref existingS3BucketName
        S3Key: !Join ["", [!Ref existingS3Path, 'kvsTranscribe.zip']]

  kvsConsumerTrigger:
    Type: "AWS::Lambda::Function"
    Properties:
      Description:  >
        AWS Lambda Function to start (asynchronous) streaming transcription; it is expected to be called by the
        Amazon Connect Contact Flow.
      Handler: "kvs_trigger.handler"
      Role: !GetAtt KvsTriggerRole.Arn
      Runtime: "nodejs12.x"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          transcriptionFunction: !Ref kvsTranscriber
      Code:
        S3Bucket: !Ref existingS3BucketName
        S3Key: !Join ["", [!Ref existingS3Path, 'kvs_trigger.zip']]